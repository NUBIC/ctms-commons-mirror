<?xml version="1.0" encoding="UTF-8" ?>
<project name="suite-dashboard" basedir="." default="publish-local" xmlns:ivy="antlib:org.apache.ivy.ant">
    <!-- Load the properties file -->
    <property file="build.properties" />

    <!-- ======= Check if IVY is present ===== -->
    <condition property="ivy.available">
        <available file="${ivy.jar.file}" />
    </condition>

    <!-- ===================================================================
        copy-resources : This task, copy files from source to destination, with filtering on
    ======================================================================= -->
    <macrodef name="copy-resources" description="copies files from src to dest, with filtering">
        <attribute name="src" />
        <attribute name="dest"/>
        <attribute name="filter" />
        <sequential>
            <filter token="project.version" value="${dashboard.version}" />
            <filter token="buildNumber" value="${today}" />
            <copy todir="@{dest}" filtering="@{filter}">
                <fileset dir="@{src}" includes="**/*.*">
                    <exclude name=".svn"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>

    <!-- =============================================================================
        ivyResolve : Will resolve the confs to the libDir
    ================================================================================= -->
    <macrodef name="ivyResolve">
        <attribute name="libDir"/>
        <attribute name="confs"/>
        <attribute name="resolveId"/>
        <sequential>
            <ivy:resolve file="${ivy.file}" conf="@{confs}" resolveid="@{resolveId}" haltonfailure="false" settingsRef="dashboard.ivy.instance" keep="true"/>
            <ivy:retrieve pattern="@{libDir}/[artifact]-[revision].[ext]" resolveid="@{resolveId}" haltonfailure="false" settingsRef="dashboard.ivy.instance"/>
        </sequential>
    </macrodef>

    <!-- ==================================================================================
        ivyPublish: Will publish the files to a repository
    ======================================================================================= -->
    <macrodef name="ivyPublish">
        <attribute name="artifactspattern"/>
        <attribute name="resolver"/>
        <attribute name="pubrevision"/>
        <attribute name="status"/>
        <sequential>
            <tstamp>
                <format property="now" pattern="yyyyMMddHHmmss"/>
            </tstamp>
            <ivy:publish artifactspattern="@{artifactspattern}"
                         resolver="@{resolver}"
                         pubrevision="@{pubrevision}"
                         status="@{status}"
                         forcedeliver="true"
                         pubdate="${now}"
                         overwrite="true" settingsRef="dashboard.ivy.instance"/>
        </sequential>
    </macrodef>


    <!-- =====================================================================
         target : ivy-new-version
             Will generate a new verion number
     ========================================================================= -->
    <target name="ivy-new-version" depends="load-ivy" unless="ivy.new.revision"
            description="Will generate a new version number">
        <echo message="Executing in ${ant.project.name}" />
        <echo message="Executing ${ant.project.name} : ivy-new-version" />
        <!-- default module version prefix value -->
        <property name="module.version.prefix" value="${dashboard.version}" />

        <!-- asks to ivy an available version number -->
        <ivy:info file="${ivy.file}" settingsRef="dashboard.ivy.instance"/>
        <ivy:buildnumber
                organisation="${ivy.organisation}" module="${ivy.module}"
                revision="${module.version.prefix}" defaultBuildNumber="1" revSep="." settingsRef="dashboard.ivy.instance"/>
    </target>

    <!-- =====================================================================
         target : local-version
             Will generate a new verion number for publishing in local repository
     ========================================================================= -->
    <target name="local-version" description="Will generate a new verion number for publishing in local repository">
        <echo message="Executing in ${ant.project.name}" />
        <tstamp>
            <format property="now" pattern="yyyyMMddHHmmss"/>
            <format property="today" pattern="yyyy-MM-dd hh:mm:ss.mmm" />
        </tstamp>
        <property name="ivy.new.revision" value="${dashboard.version}-local-${now}"/>
    </target>

    <!-- =====================================================================
         target : version
             Will generate a new verion number for publishing in release repository
     ========================================================================= -->
    <target name="version" depends="ivy-new-version"
            description="Will generate a new verion number for publishing in release repository">
        <echo message="Executing in ${ant.project.name}" />
        <tstamp>
            <format property="today" pattern="yyyy-MM-dd hh:mm:ss" />
        </tstamp>
        <!-- create version file in classpath for later inclusion in jar -->
        <echo message="version=${ivy.new.revision}" file="${classes.dir}/${ant.project.name}.properties" append="false" />
        <!-- load generated version properties file -->
        <property file="${classes.dir}/${ant.project.name}.properties" />
    </target>

    <!-- ====================================================
         target : download-ivy
         Download ivy if one is not available.
         =======================================================-->
    <target name="download-ivy" unless="ivy.available">
        <mkdir dir="${ivy.jar.dir}"/>
        <echo message="Downloading IVY....." />
        <get src="${ivy.jar.location}" dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <!-- ==================================================
		target : download-jsch
	====================================================== -->
    <target name="download-jsch" unless="jsch.available">
        <echo message="Downloading jsch....." />
        <get src="${ivy.sftp.remote}" dest="${ivy.jar.dir}/jsch-0.1.31.jar" verbose="true" usetimestamp="true"/>
    </target>


    <!-- ==============================================================
         target: load-ivy
     ================================================================== -->
    <target name="load-ivy" unless="loaded.ivy" depends="download-ivy,download-jsch">
        <echo message="Going for online settings" />
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"  />
        <ivy:settings file="${basedir}/ivysettings.xml" id="dashboard.ivy.instance"/>
        <property name="loaded.ivy" value="true" />
    </target>


    <!-- ====================================================
            target : create-local-repo
            This target will create local repository if one is not available
    =======================================================-->
    <condition property="local.repo.available">
        <available file="${basedir}/repository" />
    </condition>
    <target name="create-repo" unless="local.repo.available"
            description="Will create a local repository directory if it is not available">
        <mkdir dir="${basedir}/repository"/>
    </target>



    <!-- ==================================================================
         target: init-war
     ======================================================================= -->
    <target name="init" depends="create-repo" description="creates the directories necessary for the exploded war">
        <mkdir dir="${lib.dir}"/>
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${war.dir}"/>
        <mkdir dir="${war.dir}/WEB-INF" />
        <mkdir dir="${war.dir}/WEB-INF/lib"/>
        <mkdir dir="${war.dir}/WEB-INF/classes" />
        <mkdir dir="${war.dir}/WEB-INF/classes/META-INF" />
    </target>

    <!-- =========================================================
         target: clean-war
             Cleans the directory associated to keep exploded suite-dashboard files
     =============================================================-->
    <target name="clean">
        <delete dir="${war.dir}" verbose="true"/>
        <delete dir="${dist.dir}" verbose="true"/>
        <delete dir="${classes.dir}" verbose="true"/>
        <delete dir="${lib.dir}" verbose="true"/>
    </target>


    <!-- =========================================================
         target: war
             Will generate the war file
     =============================================================-->
	<path id="main.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

    <target name="war" depends="clean, init, load-ivy, version, source">
        <!-- compile -->
        <ivyResolve confs="default" libdir="${lib.dir}" resolveid="[org]-[module]"/>
        <copy-resources src="${main.src.resources}" dest="${classes.dir}/resources" filter="true"/>
        <javac srcdir="${main.src}" destdir="${classes.dir}" classpathref="main.classpath" debug="true" source="1.5" target="1.5"/>

        <!-- WAR -->
        <ivy:resolve file="${ivy.file}" conf="distGrid" haltonfailure="false" settingsRef="dashboard.ivy.instance"/>
        <ivy:retrieve pattern="${war.dir}/WEB-INF/lib/[artifact]-[revision].[ext]"  haltonfailure="false" settingsRef="dashboard.ivy.instance"/>
        <ivy:retrieve pattern="${war.dir}/WEB-INF/[artifact].[ext]"  haltonfailure="false" settingsRef="dashboard.ivy.instance" type="properties" />
        <copy-resources src="${classes.dir}" dest="${war.dir}/WEB-INF/classes" filter="false"/>
        <copy-resources src="${webapp.dir}" dest="${war.dir}"  filter="false" />
        <war destfile="${dist.dir}/${war.filename}" basedir="${war.dir}" level="9" webxml="${webapp.dir}/WEB-INF/web.xml"/>
    </target>


    <!-- =========================================================
         target: source
             Will generate the source file
     =============================================================-->
    <target name="source">

       <jar destfile="${src.jar.file}">
          <fileset dir="${src.dir}" />
             <manifest>
                    <attribute name="Built-By" value="${user.name}"/>
                    <attribute name="Build-Version" value="${version}" />
            </manifest>
        </jar>

    </target>

    <!-- =================================
          target: publish
         ================================= -->
    <target name="publish" depends="war"
    		description="--> publish this project in the ivy repository">
    	<echo message="Executing in ${ant.project.name}" />
    	<ivyPublish artifactspattern="${dist.dir}/[artifact].[ext]"
    		resolver="${ivy.remote.publish.resolver}"
    		pubrevision="${version}"
    		status="release"
    		/>
        <echo message="project ${ant.project.name} released with version ${version}" />
    </target>

    <!-- =================================
          target: publish-local
         ================================= -->
    <target name="publish-local" depends="local-version, war" description="--> publish this project in the local ivy repository">
    	<echo message="Executing in ${ant.project.name}" />
    	<ivyPublish artifactspattern="${dist.dir}/[artifact].[ext]"
    		resolver="${ivy.local.publish.resolver}"
    		pubrevision="${version}"
    		status="integration"
    		/>
        <echo message="project ${ant.project.name} published locally with version ${version}" />
    </target>



    <!-- =================================
          target: 
         ================================= -->
    <target name="help" 
    	description="--> Provides help command">
        <echo message="Use ant publish-local or ant publish targets" />
    </target>

</project>
